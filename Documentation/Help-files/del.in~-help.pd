#N canvas 420 34 565 686 10;
#X obj 2 4 cnv 15 301 42 empty empty del.in~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 4 graph;
#X obj 23 41 cnv 4 4 4 empty empty Delay\ line\ input 0 28 2 18 #e0e0e0 #000000 0;
#X obj 306 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 4 pd;
#X obj 345 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 458 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X text 19 399 see also:;
#X obj 175 400 else/ffdelay~;
#X obj 268 400 else/fbdelay~;
#X text 50 87 [del.in~] sets and writes to a delay line. Use [del.out~] to read it. This is quite similar to [delread~]/[delread4~] \, but with more features., f 74;
#X obj 4 448 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 524 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 3 590 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 3 654 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 106 455 cnv 17 3 60 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 45 634 2) float;
#X obj 4 559 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 172 469 clear;
#X text 209 469 - clears delay line, f 37;
#X text 118 499 freeze <float>;
#X text 130 484 size <float>;
#X text 209 484 - changes the delay size, f 37;
#X text 209 499 - non zero freezes \, zero unfreezes, f 37;
#X text 166 454 signal;
#X text 209 454 - signal input into the delay line, f 37;
#X obj 105 308 else/out~;
#X msg 148 161 clear;
#X text 188 160 clears delay line;
#X msg 157 214 size \$1;
#X floatatom 157 190 5 0 0 0 - - - 0;
#X obj 223 213 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X msg 223 237 freeze \$1;
#X text 318 271 The -samps flag sets time value to samples instead of ms (default), f 34;
#X text 193 190 clears and resizes the delay line (in samples in this case);
#X text 244 213 freeze (stop updating values into the delay line);
#X text 94 595 (besides the first optional argument that defines "in" or "out", f 64;
#X text 39 618 1) symbol;
#X text 102 633 - delay size in ms or samples (default 1 sample);
#X text 128 565 -samps;
#X text 170 566 - sets time value to samples (default is ms);
#X obj 104 532 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 166 533 signal;
#X text 209 533 - dummy outlet to force order of execution;
#X text 102 618 - sets delay line name (optional: default internal name relative to patch), f 74;
#X obj 104 132 else/player~ bubul.mp3 1 1;
#X obj 124 276 else/del.in~ -samps \$0-y 44100;
#X text 272 306 The second argument also defines the maximum delay amount a corresponding [del.out~] has., f 44;
#X obj 87 400 else/del.out~;
#N canvas 630 306 444 290 example 0;
#X obj 118 75 hsl 128 15 0 1000 0 0 empty empty empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 115 192 else/out~;
#X floatatom 115 102 6 0 0 0 - - - 0;
#X obj 115 131 else/f2s~ 200;
#X text 157 102 delay time (ms by default);
#X text 235 154 read from delay line, f 10;
#X text 82 31 Reading from the delay line of the parent patch.;
#X obj 115 159 else/del.out~ \$0-y;
#X connect 0 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 7 0;
#X connect 7 0 1 0;
#X restore 441 395 pd example;
#X connect 31 0 50 0;
#X connect 33 0 50 0;
#X connect 34 0 33 0;
#X connect 35 0 36 0;
#X connect 36 0 50 0;
#X connect 49 0 30 0;
#X connect 49 0 50 0;
