#N canvas 482 38 564 663 10;
#X obj 179 193 keyboard 17 75 2 4 0 0 empty empty;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 23 40 cnv 4 4 4 empty empty Mono/Polyphonic\ synth\ (abstraction\ loader) 0 28 2 18 #e0e0e0 #000000 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 3 3 cnv 15 301 42 empty empty synth~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 3 graph;
#X obj 4 383 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 478 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 567 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 92 487 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 93 390 cnv 17 3 83 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 4 634 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 179 313 else/out~;
#X text 185 459 anything;
#X text 183 487 signal;
#X text 231 487 - the synth signal output;
#X text 209 393 list;
#X text 241 393 - midi note messages \, pitch and velocity, f 48;
#X obj 4 513 cnv 3 550 3 empty empty flag 8 12 0 13 #dcdcdc #000000 0;
#X text 149 427 voices <float>;
#X text 241 427 - sets number of voices (1 sets to monophonic), f 48;
#X text 127 576 1) symbol - abstraction name (default template);
#X text 241 410 - abstraction name and optional number of voices;
#X text 113 410 load <symbol \, float>;
#X text 173 443 mc <float>;
#X text 241 443 - non zero sets to multichannel output;
#X text 241 459 - custom messages sent to the synth abstraction;
#X text 103 524 -v <float>: sets number of voices (default 1/mono);
#X text 145 541 -mc: sets to multichannel output (default single channel);
#N canvas 518 61 544 618 basic 0;
#X obj 93 288 keyboard 17 75 3 3 0 0 empty empty;
#X obj 93 536 else/out~;
#X msg 131 426 voices 1;
#X msg 140 457 voices 4;
#X text 287 389 <-- abstraction name and optional number of voices, f 26;
#X text 188 425 <-- a voice number of 1 sets to monophonic;
#X text 199 457 <-- 4 voice polyphony;
#X msg 112 389 load synth.voice.template 8;
#X text 337 54 see:;
#X obj 373 55 else/mono;
#X text 51 21 [synth~] is based on [clone] and [mono]/[voices]. If you set the number of voices to 1 the synth is monophonic and uses [mono] with the default setting of going back to the "last" voice., f 71;
#X text 331 118 see:;
#X obj 367 119 else/voices;
#X text 50 174 If you use the "load" message \, you can give an optional 2nd float argument to set the number of voices. If you don't \, the previously set number of voices prevails. A "voices" message can change the number of voices., f 71;
#X text 76 105 If you set the number of voices to 2 or more the synth is polyphonic and uses [voices] with the default settings and "voice stealing"., f 39;
#X obj 93 238 notein;
#X obj 93 262 pack;
#X text 161 242 [synth~] expects list values for pitch and velocity \, as given by the [else/keyboard] object., f 52;
#X text 244 523 There's also the 'mc' message/flag that we'll see later and custom messages that we'll see next., f 41;
#X obj 93 497 else/synth~;
#X connect 0 0 19 0;
#X connect 2 0 19 0;
#X connect 3 0 19 0;
#X connect 7 0 19 0;
#X connect 15 0 16 0;
#X connect 15 1 16 1;
#X connect 16 0 0 0;
#X connect 19 0 1 0;
#X restore 485 298 pd basic;
#N canvas 619 119 501 534 multichannel 0;
#X obj 75 85 keyboard 17 75 3 3 0 0 empty empty;
#X obj 75 35 notein;
#X obj 75 59 pack;
#X msg 104 212 mc \$1;
#X obj 104 182 tgl 18 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 75 445 else/out.mc~;
#X obj 75 293 else/meter4~;
#X text 237 297 [synth~] is multichannel aware and can send a multichannel signal out with the '-mc' flag or message., f 34;
#X text 237 338 The multichannel output carries a number of channels that is the same as the number of voices \, and each voice is part of a single channel., f 34;
#X text 236 403 Hence \, for a monophonic synth the number of output channels is only one either way. Two voices give you a stereo connection \, four voices a quadraphonic and so on., f 34;
#X text 137 184 non zero sets to multichannel output;
#X obj 75 256 else/synth~ -v 4 -mc;
#X connect 0 0 11 0;
#X connect 1 0 2 0;
#X connect 1 1 2 1;
#X connect 2 0 0 0;
#X connect 3 0 11 0;
#X connect 4 0 3 0;
#X connect 6 0 5 0;
#X connect 11 0 6 0;
#X restore 443 347 pd multichannel;
#X text 27 260 see also:;
#X obj 28 305 else/voices;
#X obj 28 282 else/mono;
#X text 121 272 click to open --->, f 9;
#X obj 28 328 clone;
#X text 253 282 <-- shift click to load;
#X text 34 89 The [synth~] object loads synth abstractions that follow a simple template. It is just a wrapper over [clone] and [mono]/[voices] but may provide some convenience \, specially to newbies. One convenience is the ability to open/load different abstractions in runtime. The arguments are abstraction name and number of voices. If no arguments are given \, a default and simple abstraction is loaded as a template and basis to build new synths. Clicking on the object opens the loaded abstraction. Shift click opens a panel to choose an abstraction., f 81;
#X text 127 592 2) float - (optional) number of voices (default 1/mono);
#X text 127 609 3) list - (optional) extra arguments sent to the abstraction;
#X obj 179 282 else/synth~;
#N canvas 577 61 570 548 custom_messages 0;
#X obj 90 187 keyboard 17 75 3 3 0 0 empty empty;
#X obj 90 137 notein;
#X obj 90 161 pack;
#X msg 116 284 adsr 50 10 0.7 3000;
#X obj 90 453 out~;
#X obj 90 411 else/plate.rev~;
#X text 73 30 You can have several custom messages taken by your abstraction. In the template we have the "adsr" message that sets the parameter of an [adsr~] object \, for instance. Click and open the template to check it out and also note that the release parameter from within the abstraction we're sending the release value to the parent [synth~] abstraction. This sets the 'release' value of [voices] and is only useful for polyphonic synths., f 66;
#X text 225 395 The idea of [synth~] is to generate synth voices involving basic units of oscillators \, envelopes and synth techniques such as FM and stuff. You can also have some FX modules such as reverbs or whatever inside the abstraction \, but such things are way more reasonable to have outside the cloned abstraction for processing the overall sound \, as in the example to the left where we add a plate reverb., f 48;
#X text 255 287 By sending the 'adsr' message \, the loaded abstraction also sets the release value of [voices]., f 41;
#X text 185 123 Extra arguments besides abstraction name and number of voices are sent to the abstraction. Open to check it., f 37;
#X msg 130 318 any other 1 2 3;
#X obj 90 356 else/synth~ synth.voice.template 4 50 10 0.7 300;
#X connect 0 0 11 0;
#X connect 1 0 2 0;
#X connect 1 1 2 1;
#X connect 2 0 0 0;
#X connect 3 0 11 0;
#X connect 5 0 4 0;
#X connect 5 1 4 1;
#X connect 10 0 11 0;
#X connect 11 0 5 0;
#X restore 425 322 pd custom_messages;
#X connect 0 0 46 0;
#X connect 46 0 18 0;
