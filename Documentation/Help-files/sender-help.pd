#N canvas 498 38 566 489 10;
#X obj 4 285 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 369 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 404 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 130 293 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 23 40 cnv 4 4 4 empty empty Send\ messages 0 28 2 18 #e0e0e0 #000000 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 3 3 cnv 15 301 42 empty empty sender 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 3 graph;
#X floatatom 231 251 5 0 0 0 - - - 0;
#X floatatom 231 156 5 0 0 0 - - - 0;
#N canvas 833 245 477 346 two-names 0;
#X floatatom 137 265 5 0 0 0 - - - 0;
#X floatatom 237 263 5 0 0 0 - - - 0;
#X obj 137 242 r \$0-a;
#X obj 237 240 r \$0-b;
#X obj 130 195 else/sender \$0-a \$0-b;
#X symbolatom 191 141 10 0 0 0 - - - 0;
#X msg 191 113 symbol;
#X floatatom 130 162 5 0 0 0 - - - 0;
#X symbolatom 274 167 10 0 0 0 - - - 0;
#X msg 274 139 symbol;
#X text 45 26 [sender] can have up to two send names. Hence \, it sends data to two different addresses. To get a second send symbol you need to give it two send names as arguments. An inlet is then created to set each symbol name. An empty symbol clears the send name and the sent message goes anywhere., f 65;
#X text 242 111 empty symbol;
#X text 325 138 empty symbol;
#X connect 2 0 0 0;
#X connect 3 0 1 0;
#X connect 5 0 4 1;
#X connect 6 0 5 0;
#X connect 7 0 4 0;
#X connect 8 0 4 2;
#X connect 9 0 8 0;
#X restore 456 206 pd two-names;
#X obj 231 221 else/receiver \$0-x;
#X obj 231 186 else/sender \$0-x;
#X text 167 220 see also:;
#X text 176 293 anything;
#X text 234 293 - messages to send;
#X obj 130 317 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 188 316 symbol;
#X text 234 316 - send symbol name #1;
#X obj 130 340 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 188 340 symbol;
#X text 234 340 - send symbol name #2;
#X text 204 378 NONE;
#X obj 4 460 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X text 158 415 1) float - optional depth value (default 1);
#X text 164 435 1) list - up to two send receive names;
#N canvas 649 168 477 359 depth 0;
#X obj 253 205 else/dollsym 1;
#X obj 253 173 symbol \\\$0-a;
#X obj 253 145 bng 16 250 50 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000;
#X symbolatom 253 231 10 0 0 0 - - - 0;
#X text 45 20 I'm lazy to create an abstraction and prove this to you \, but trust me \, you can have a depth argument like in [dollsym] to expand dollar signs according to a parent patch. Check the help file of [dollsym] if you're too confused., f 65;
#X text 79 275 This allows you to send from within an abstraction values to the loading patch. Or to another abstraction that lives in the same parent patch if it has [esle/receiver]., f 59;
#X obj 122 221 else/sender 1 \\\$0-a;
#X text 45 74 This is possible at load time with an argument or when giving a new name with a dollar sign to expand - which is the same as using [dollsym]. Mote that in these cases you need to escape dollar signs with a backslash., f 65;
#X connect 0 0 3 0;
#X connect 1 0 0 0;
#X connect 1 0 6 1;
#X connect 2 0 1 0;
#X restore 479 234 pd depth;
#X text 23 201 see also:;
#X obj 19 228 else/receiver;
#X text 74 88 [sender] is much like vanilla's [send] \, but can have up to two names and at load time can expand dollar symbols according to parent patches. It is a counterpart to [else/receiver] \, which can "learn" and connect to a [sender] object (check its help file)., f 71;
#X connect 16 0 19 0;
#X connect 18 0 15 0;
