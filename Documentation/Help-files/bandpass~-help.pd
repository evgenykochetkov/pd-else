#N canvas 487 62 567 594 10;
#X obj 4 285 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 451 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 514 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 562 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 195 222 else/out~;
#X obj 2 3 cnv 15 301 42 empty empty bandpass~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X obj 23 40 cnv 4 4 4 empty empty Bandpass 0 28 2 18 #e0e0e0 #000000 0;
#X obj 169 40 cnv 4 4 4 empty empty filter 0 28 2 18 #e0e0e0 #000000 0;
#X obj 99 40 cnv 4 4 4 empty empty resonant 0 28 2 18 #e0e0e0 #000000 0;
#X obj 205 160 noise~;
#X obj 259 145 nbx 5 14 100 10000 1 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 324 169 nbx 5 14 0.1 100 1 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X msg 128 159 bypass \$1;
#X obj 128 131 tgl 21 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#N canvas 418 100 926 617 filter 0;
#X obj 706 101 hsl 128 15 0.01 100 1 0 empty \$0-Q-set empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 638 75 hsl 128 15 20 20000 1 0 empty \$0-Hz-set empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 568 111 noise~;
#X obj 568 183 else/out~;
#X text 55 92 y[n] = a0 * x[n] + a2 * x[n-2] + b1 * y[n-1] + b2 * y[n-2];
#X text 61 118 a0 \, a2 \, b1 and b2 are calculated as a function of center frequency 'f' in hz and 'q' as follows \;;
#X text 82 145 omega = f * PI/nyquist \; alphaQ = sin(omega) / (2*q) \; b0 = alphaQ + 1 \; a0 = alphaQ / b0 \; a2 = -a0 \; b1 = 2*cos(omega) / b0 \; b2 = (alphaQ - 1) / b0 \;;
#X obj 703 125 nbx 6 14 0.1 100 0 0 \$0-Q empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 635 99 nbx 6 14 20 20000 0 0 \$0-Hz empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 54 46 The equation is from the "Cookbook formulae for audio EQ biquad filter coefficients" by Robert Bristow-Johnsonc [1] \, and it is:;
#X text 655 75 center frequency;
#X text 727 101 resonance (Q);
#X obj 568 150 else/bandpass~ 1000 0.1;
#X text 53 13 This filter has zeroes fixes at +1 and -1 on the z-plane \, which means both 0Hz and Nyquist are always filtered out.;
#X text 735 151 Note: a 'q' value of 0 bypasses the input., f 21;
#X text 502 18 Change the parameters and check the filter response below. The graph considers a sample rate of 44.1Khz.;
#N canvas 169 31 398 275 coeff 0;
#X obj 103 87 r \$0-Hz;
#X obj 173 87 r \$0-Q;
#X obj 87 54 loadbang;
#X obj 87 156 outlet;
#X obj 87 128 else/bicoeff2 bandpass 1000 0.1;
#X connect 0 0 4 0;
#X connect 1 0 4 1;
#X connect 2 0 4 0;
#X connect 4 0 3 0;
#X restore 12 281 pd coeff;
#X obj 12 308 else/biplot;
#X text 30 249 [1] found in https://webaudio.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html, f 80;
#X connect 0 0 7 0;
#X connect 1 0 8 0;
#X connect 2 0 12 0;
#X connect 7 0 12 2;
#X connect 8 0 12 1;
#X connect 12 0 3 0;
#X connect 16 0 17 0;
#X restore 429 221 pd filter formula \; and response;
#X text 118 520 1) float - central frequency in Hertz (default 0);
#X msg 195 127 clear;
#X text 383 168 resonance (Q by default);
#X obj 3 485 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 135 493 -bw;
#X text 165 493 - sets resonance parameter to bandwidth in octaves, f 53;
#N canvas 837 183 407 322 resonance 0;
#X text 27 17 By default \, the resonance parameter is the filter 'q' \, but you can also set it as bandwidth in octaves. This is done with the -bw flag.;
#X text 28 62 Alternatively \, you can switch from 'q' to 'bw' with the message methods.;
#X obj 81 224 else/out~;
#X obj 81 129 noise~;
#X msg 147 155 q;
#X msg 135 128 bw;
#X text 175 156 resonance as 'q';
#X text 163 128 resonance as bandwidth in octaves;
#X obj 81 184 else/bandpass~ -bw 500 0.5;
#X connect 3 0 8 0;
#X connect 4 0 8 0;
#X connect 5 0 8 0;
#X connect 8 0 2 0;
#X restore 464 196 pd resonance;
#X text 118 538 2) float - resonance (default 1) \, either in 'Q' (default) or 'bw', f 65;
#X obj 195 191 else/bandpass~ 100 0.1;
#X text 214 60 (constant gain);
#X text 317 144 resonant/center frequency;
#X obj 305 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#X obj 344 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 457 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 477 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 514 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 463 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 501 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1 0 0;
#X restore 304 3 graph;
#X text 33 175 see also:;
#X obj 35 224 else/resonant~;
#X obj 35 249 else/bicoeff2;
#X obj 35 199 else/bpbank~;
#X obj 109 295 cnv 17 3 102 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 187 338 clear;
#X text 133 353 bypass <float>;
#X text 230 353 - 1 (bypasses input signal) or 0 (doesn't bypass);
#X text 230 338 - clears filter's memory if you blow it up;
#X text 205 382 bw;
#X text 230 382 - sets resonance parameter to bandwidth in octaves;
#X text 211 368 q;
#X text 230 368 - sets resonance parameter to Q (default);
#X text 163 295 signal(s);
#X text 230 295 - signal(s) to be filtered;
#X text 145 323 reson <list>;
#X text 230 323 - filter resonance for each channel;
#N canvas 628 213 557 400 multichannel 0;
#X obj 47 279 else/out.mc~;
#X obj 128 201 sig~ 50 10;
#X obj 47 148 else/white~ -ch 2;
#X obj 87 177 sig~ 500 1000;
#X obj 277 99 knob 50 100 10000 1 500 empty empty #dfdfdf #7c7c7c #000000 1 0 0 0 1 320 0 0 100 empty empty 0 8 0 0 0 1 0 0 0 0;
#X obj 277 156 else/pack2;
#X obj 277 303 else/out.mc~;
#X listbox 277 180 17 0 0 0 - - - 0;
#X obj 334 99 knob 50 100 10000 1 1000 empty empty #dfdfdf #7c7c7c #000000 1 0 0 0 1 320 0 0 100 empty empty 0 8 0 0 0 1 0 0 0 0;
#X obj 403 99 knob 50 0.5 100 1 10 empty empty #dfdfdf #7c7c7c #000000 1 0 0 0 1 320 0 0 0.5 empty empty 0 8 0 0 0 1 0 0 0 0;
#X obj 403 156 else/pack2;
#X listbox 403 180 17 0 0 0 - - - 0;
#X obj 403 208 else/insert reson, f 11;
#X obj 460 99 knob 50 0.5 100 1 10 empty empty #dfdfdf #7c7c7c #000000 1 0 0 0 1 320 0 0 0.5 empty empty 0 8 0 0 0 1 0 0 0 0;
#X obj 277 262 else/bandpass~;
#X obj 47 228 else/bandpass~;
#X obj 277 208 else/insert freq, f 11;
#X obj 220 173 noise~;
#X text 237 31 The 'freq' and 'reson' messages can be used to set values for one or more channels. The number of values set the number of channels., f 44;
#X text 34 33 The filter outputs the same number of channels as the input with most channels. If other inputs also have more than one channel \, the number channels must match. A single value gets repeated to meet the number of multichannels., f 29;
#X connect 1 0 15 2;
#X connect 2 0 15 0;
#X connect 3 0 15 1;
#X connect 4 0 5 0;
#X connect 5 0 7 0;
#X connect 7 0 16 0;
#X connect 8 0 5 1;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 11 0 12 0;
#X connect 12 0 14 0;
#X connect 13 0 10 1;
#X connect 14 0 6 0;
#X connect 15 0 0 0;
#X connect 16 0 14 0;
#X connect 17 0 14 0;
#X restore 447 254 pd multichannel;
#X obj 109 464 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 109 408 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 109 431 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 230 465 - filtered signal;
#X text 163 465 signal(s);
#X text 163 409 signal(s);
#X text 163 432 signal(s);
#X text 230 432 - filter resonance (Q \, bandwidth or t60);
#X text 229 408 - center frequency in Hertz;
#X text 151 309 freq <list>;
#X text 230 309 - center frequency in Hertz for each channel;
#X text 44 88 [bandpass~] is a 2nd order bandpass resonant filter. Unlike [else/resonant~] \, it has a maximum and constant gain at 0dB. It has support for multichannels., f 77;
#X connect 10 0 24 0;
#X connect 11 0 24 1;
#X connect 12 0 24 2;
#X connect 13 0 24 0;
#X connect 14 0 13 0;
#X connect 17 0 24 0;
#X connect 24 0 4 0;
