#N canvas 501 38 562 579 10;
#X obj 4 285 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 435 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 501 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 548 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 109 444 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 109 293 cnv 17 3 88 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 181 293 signal;
#X text 181 444 signal;
#X obj 175 222 else/out~;
#X obj 2 3 cnv 15 301 42 empty empty bandstop~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X obj 23 40 cnv 4 4 4 empty empty Band 0 28 2 18 #e0e0e0 #000000 0;
#X obj 112 40 cnv 4 4 4 empty empty filter 0 28 2 18 #e0e0e0 #000000 0;
#X obj 71 40 cnv 4 4 4 empty empty stop 0 28 2 18 #e0e0e0 #000000 0;
#X obj 185 160 noise~;
#X obj 242 145 nbx 5 14 100 10000 1 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 310 169 nbx 5 14 0.1 100 1 0 empty empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 230 444 - filtered signal;
#X text 230 293 - signal to be filtered;
#X obj 109 388 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 109 411 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 145 388 float/signal;
#X text 145 411 float/signal;
#X text 187 311 clear;
#X msg 108 155 bypass \$1;
#X text 133 329 bypass <float>;
#X text 230 329 - 1 (bypasses input signal) or 0 (doesn't bypass);
#N canvas 440 72 926 617 filter 0;
#X obj 564 124 noise~;
#X obj 564 199 else/out~;
#X text 53 15 This filter has zeroes fixes at +1 and -1 on the z-plane \, which means both 0Hz and Nyquist are always filtered out.;
#X text 509 31 Change the parameters and check the filter response below. The graph considers a sample rate of 44.1Khz.;
#X text 56 118 a0 \, a1 \, a2 \, b1 and b2 are calculated as a function of center frequency 'f' in hz and 'q' as follows \;;
#X text 80 150 omega = f * PI/nyquist \; alphaQ = sin(omega) / (2*q) \; b0 = alphaQ + 1 \; a0 = 1 / b0 \; a1 = -2*cos(omega) / b0 \; a2 = a0 \; b1 = -a1 \; b2 = (alphaQ - 1) / b0 \;;
#X text 722 166 Note: q's and bw's minimum value is 1e-06!, f 21;
#X obj 702 111 hsl 128 15 0.01 100 1 0 empty \$0-Q-set empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 634 85 hsl 128 15 20 20000 1 0 empty \$0-Hz-set empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 699 135 nbx 6 14 0.1 100 0 0 \$0-Q empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 631 109 nbx 6 14 20 20000 0 0 \$0-Hz empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 651 85 center frequency;
#X text 723 111 resonance (Q);
#X text 54 48 The equation is from the "Cookbook formulae for audio EQ biquad filter coefficients" by Robert Bristow-Johnsonc [1] \, and it is: y[n] = a0 * x[n] + a1 * x[n-2] + a2 * x[n-2] + b1 * y[n-1] + b2 * y[n-2];
#X obj 564 163 else/bandstop~ 1000 0.1;
#N canvas 169 31 398 275 coeff 0;
#X obj 103 87 r \$0-Hz;
#X obj 173 87 r \$0-Q;
#X obj 87 54 loadbang;
#X obj 87 156 outlet;
#X obj 87 128 else/bicoeff2 bandstop 1000 0.1;
#X connect 0 0 4 0;
#X connect 1 0 4 1;
#X connect 2 0 4 0;
#X connect 4 0 3 0;
#X restore 12 291 pd coeff;
#X obj 12 318 else/biplot;
#X text 31 259 [1] found in https://webaudio.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html, f 80;
#X connect 0 0 14 0;
#X connect 7 0 9 0;
#X connect 8 0 10 0;
#X connect 9 0 14 2;
#X connect 10 0 14 1;
#X connect 14 0 1 0;
#X connect 15 0 16 0;
#X restore 429 222 pd filter formula \; and response;
#X text 229 387 - central frequency in Hertz;
#X text 118 507 1) float - central frequency in Hertz (default 0);
#X msg 175 127 clear;
#X text 230 311 - clears filter's memory if you blow it up;
#X text 369 168 resonance (Q by default);
#X text 205 346 bw;
#X text 230 346 - sets resonance parameter to bandwidth in octaves;
#X text 211 363 q;
#X obj 3 474 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X text 135 480 -bw;
#X text 165 480 - sets resonance parameter to bandwidth in octaves, f 53;
#N canvas 868 136 407 322 resonance 0;
#X text 27 17 By default \, the resonance parameter is the filter 'q' \, but you can also set it as bandwidth in octaves. This is done with the -bw flag.;
#X text 28 62 Alternatively \, you can switch from 'q' to 'bw' with the message methods.;
#X obj 81 224 else/out~;
#X obj 81 129 noise~;
#X msg 147 155 q;
#X msg 135 128 bw;
#X text 175 156 resonance as 'q';
#X text 163 128 resonance as bandwidth in octaves;
#X obj 81 184 else/bandstop~ -bw 500 0.5;
#X connect 3 0 8 0;
#X connect 4 0 8 0;
#X connect 5 0 8 0;
#X connect 8 0 2 0;
#X restore 464 199 pd resonance;
#X text 118 525 2) float - resonance (default 1) \, either in 'Q' (default) or 'bw', f 65;
#X text 230 363 - sets resonance parameter to Q (default);
#X text 230 411 - filter resonance (Q or bandwidth);
#X text 300 144 resonant/center frequency;
#X obj 175 191 else/bandstop~ 1000 0.1;
#X obj 305 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#X obj 344 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 457 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 477 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 514 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 463 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 501 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1 0 0;
#X restore 304 3 graph;
#N canvas 628 213 557 400 multichannel 0;
#X obj 63 294 else/out.mc~;
#X obj 144 216 sig~ 50 10;
#X obj 63 156 else/white~ -ch 2;
#X obj 103 192 sig~ 500 1000;
#X obj 292 99 knob 50 100 10000 1 500 empty empty #dfdfdf #7c7c7c #000000 1 0 0 0 1 320 0 0 100 empty empty 0 8 0 0 0 1 0 0 0 0;
#X obj 292 156 else/pack2;
#X obj 292 303 else/out.mc~;
#X listbox 292 180 17 0 0 0 - - - 0;
#X obj 349 99 knob 50 100 10000 1 1000 empty empty #dfdfdf #7c7c7c #000000 1 0 0 0 1 320 0 0 100 empty empty 0 8 0 0 0 1 0 0 0 0;
#X obj 418 99 knob 50 0.5 100 1 10 empty empty #dfdfdf #7c7c7c #000000 1 0 0 0 1 320 0 0 0.5 empty empty 0 8 0 0 0 1 0 0 0 0;
#X obj 418 156 else/pack2;
#X listbox 418 180 17 0 0 0 - - - 0;
#X obj 418 208 else/insert reson, f 11;
#X obj 475 99 knob 50 0.5 100 1 10 empty empty #dfdfdf #7c7c7c #000000 1 0 0 0 1 320 0 0 0.5 empty empty 0 8 0 0 0 1 0 0 0 0;
#X obj 292 208 else/insert freq, f 11;
#X obj 235 173 noise~;
#X text 237 31 The 'freq' and 'reson' messages can be used to set values for one or more channels. The number of values set the number of channels., f 44;
#X obj 63 243 else/bandstop~;
#X obj 292 262 else/bandstop~;
#X text 40 30 The filter outputs the same number of channels as the input with most channels. If other inputs also have more than one channel \, the number channels must match. A single value gets repeated to meet the number of multichannels., f 29;
#X connect 1 0 17 2;
#X connect 2 0 17 0;
#X connect 3 0 17 1;
#X connect 4 0 5 0;
#X connect 5 0 7 0;
#X connect 7 0 14 0;
#X connect 8 0 5 1;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 11 0 12 0;
#X connect 12 0 18 0;
#X connect 13 0 10 1;
#X connect 14 0 18 0;
#X connect 15 0 18 0;
#X connect 17 0 0 0;
#X connect 18 0 6 0;
#X restore 447 256 pd multichannel;
#X obj 108 127 tgl 21 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#X text 61 86 [bandstop~] is a 2nd order band reject filter \, it can also be used as a 'notch' filter. It has support for multichannels., f 62;
#X connect 14 0 44 0;
#X connect 15 0 44 1;
#X connect 16 0 44 2;
#X connect 24 0 44 0;
#X connect 30 0 44 0;
#X connect 44 0 8 0;
#X connect 54 0 24 0;
