#N canvas 607 58 562 625 10;
#X obj 209 221 else/out~;
#X obj 2 3 cnv 15 301 42 empty empty highshelf~ 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X obj 23 40 cnv 4 4 4 empty empty Highshelf 0 28 2 18 #e0e0e0 #000000 0;
#X obj 109 40 cnv 4 4 4 empty empty filter 0 28 2 18 #e0e0e0 #000000 0;
#X obj 221 157 noise~;
#X msg 142 154 bypass \$1;
#X obj 142 126 tgl 21 0 empty empty empty 17 7 0 10 #dcdcdc #000000 #000000 0 1;
#N canvas 385 130 939 616 filter 0;
#X obj 667 119 hsl 128 15 0.1 1 0 0 empty \$0-Q-set empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 614 70 hsl 128 15 20 20000 1 0 empty \$0-Hz-set empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 558 116 noise~;
#X obj 558 208 else/out~;
#X obj 664 143 nbx 5 14 1e-06 1 0 0 \$0-Q empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X obj 611 94 nbx 4 14 20 20000 0 0 \$0-Hz empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 502 20 Change the parameters and check the filter response below. The graph considers a sample rate of 44.1Khz.;
#X text 611 70 shelving frequency;
#X text 713 119 slope;
#X obj 757 149 hsl 128 15 -24 24 0 0 empty \$0-G-set empty -2 -8 0 10 #dcdcdc #000000 #000000 0 1;
#X obj 754 175 nbx 4 14 -24 24 0 0 \$0-G empty empty 0 -8 0 10 #dcdcdc #000000 #000000 0 256;
#X text 790 149 gain (dB);
#X text 89 21 The equation is from the "Cookbook formulae for audio EQ biquad filter coefficients" by Robert Bristow-Johnsonc [1] \, and it is: y[n] = a0 * x[n] + a1 * x[n-2] + a2 * x[n-2] + b1 * y[n-1] + b2 * y[n-2];
#X text 87 80 a0 \, a1 \, a2 \, b1 and b2 are calculated as a function of frequency 'f' in hz \, slope 'S' and 'db' gain as follows \; w = f * PI/nyquist \; G = pow(10 \, db/40) \; alphaS = sin(w) * sqrt((G*G + 1) * (1/S - 1) + 2*G) \; b0 = (G+1) - (G-1)*cos(w) + alphaS \; a0 = G*(G+1 + (G-1)*cos(w) + alphaS) / b0 \; a1 = -2*G*(G-1 + (G+1)*cos(w)) / b0 \; a2 = G*(G+1 + (G-1)*cos(w) - alphaS) / b0 \; b1 = -2*(G-1 - (G+1)*cos(w)) / b0 \; b2 = -(G+1 - (G-1)*cos(w) -alphaS) / b0 \;;
#N canvas 169 31 398 275 coeff 0;
#X obj 103 87 r \$0-Hz;
#X obj 173 87 r \$0-Q;
#X obj 87 54 loadbang;
#X obj 87 156 outlet;
#X obj 254 89 r \$0-G;
#X obj 87 127 else/bicoeff2 highshelf 1000 0.1 12;
#X connect 0 0 5 0;
#X connect 1 0 5 1;
#X connect 2 0 5 0;
#X connect 4 0 5 2;
#X connect 5 0 3 0;
#X restore 19 272 pd coeff;
#X obj 19 299 else/biplot;
#X obj 558 175 else/highshelf~ 1000 0.1 12;
#X text 26 230 [1] found in https://webaudio.github.io/Audio-EQ-Cookbook/audio-eq-cookbook.html, f 80;
#X connect 0 0 4 0;
#X connect 1 0 5 0;
#X connect 2 0 16 0;
#X connect 4 0 16 2;
#X connect 5 0 16 1;
#X connect 9 0 10 0;
#X connect 10 0 16 3;
#X connect 14 0 15 0;
#X connect 16 0 3 0;
#X restore 429 214 pd filter formula \; and response;
#X msg 209 126 clear;
#X obj 209 190 else/highshelf~ 1500 0.5 -8;
#X obj 305 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#X obj 344 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 457 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 477 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 514 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 463 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 501 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1 0 0;
#X restore 304 3 graph;
#X text 61 84 [highshelf~] is a 2nd order highshelf filter. It has support for multichannels.;
#X obj 4 534 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 597 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X text 138 575 3) float - gain in dB (default 0), f 53;
#X text 138 558 2) float - slope from 0 to 1 (default 0), f 53;
#X text 138 540 1) float - shelving frequency in Hertz (default 0), f 53;
#X obj 4 290 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 495 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 102 504 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 102 423 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 102 446 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 102 469 cnv 17 3 17 empty empty 3 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 223 469 - gain in dB;
#X text 222 422 - central frequency in Hertz;
#X text 156 469 signal(s);
#X text 156 446 signal(s);
#X text 156 423 signal(s);
#X text 156 504 signal(s);
#X text 223 504 - filtered signal(s);
#X obj 103 301 cnv 17 3 115 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 181 357 clear;
#X text 127 372 bypass <float>;
#X text 224 372 - 1 (bypasses input signal) or 0 (doesn't bypass);
#X text 224 357 - clears filter's memory if you blow it up;
#X text 199 401 bw;
#X text 224 401 - sets resonance parameter to bandwidth in octaves;
#X text 205 387 q;
#X text 224 387 - sets resonance parameter to Q (default);
#X text 157 301 signal(s);
#X text 224 301 - signal(s) to be filtered;
#X text 145 315 freq <list>;
#X text 157 343 db <list>;
#X text 224 343 - gain in db for each channel;
#X text 139 329 slope <list>;
#X text 224 329 - filter slope for each channel;
#X text 223 446 - slope;
#X text 224 315 - shelving frequency in Hertz for each channel;
#N canvas 628 213 693 408 multichannel 0;
#X obj 50 147 else/white~ -ch 2;
#X obj 285 83 knob 50 100 10000 1 500 empty empty #dfdfdf #7c7c7c #000000 1 0 0 0 1 320 0 0 100 empty empty 0 8 0 0 0 1 0 0 0 0;
#X obj 285 140 else/pack2;
#X obj 411 324 else/out.mc~;
#X listbox 285 164 17 0 0 0 - - - 0;
#X obj 342 83 knob 50 100 10000 1 1000 empty empty #dfdfdf #7c7c7c #000000 1 0 0 0 1 320 0 0 100 empty empty 0 8 0 0 0 1 0 0 0 0;
#X obj 411 83 knob 50 0.1 1 1 0.5 empty empty #dfdfdf #7c7c7c #000000 1 0 0 0 1 320 0 0 0.1 empty empty 0 8 0 0 0 1 0 0 0 0;
#X obj 411 140 else/pack2;
#X listbox 411 164 17 0 0 0 - - - 0;
#X obj 285 192 else/insert freq;
#X obj 87 183 sig~ 500 1000;
#X obj 50 315 else/out.mc~;
#X obj 363 222 noise~;
#X text 34 33 The filter outputs the same number of channels as the input with most channels. If other inputs also have more than one channel \, the number channels must match. A single value gets repeated to meet the number of multichannels., f 29;
#X obj 531 83 knob 50 -12 12 0 -6 empty empty #dfdfdf #7c7c7c #000000 1 0 0 0 1 320 0 0 0 empty empty 0 8 0 0 0 1 0 0 0 0;
#X obj 531 140 else/pack2;
#X listbox 531 164 17 0 0 0 - - - 0;
#X obj 531 192 else/insert db;
#X obj 588 83 knob 50 -12 12 0 6 empty empty #dfdfdf #7c7c7c #000000 1 0 0 0 1 320 0 0 0 empty empty 0 8 0 0 0 1 0 0 0 0;
#X obj 161 240 sig~ -6 6;
#X obj 124 212 sig~ 0.5 1;
#X text 313 25 The 'freq' \, 'slope' and 'db' messages can be used to set values for one or more channels. The number of values set the number of channels., f 50;
#X obj 411 192 else/insert slope;
#X obj 468 83 knob 50 0.1 1 1 0.5 empty empty #dfdfdf #7c7c7c #000000 1 0 0 0 1 320 0 0 0.1 empty empty 0 8 0 0 0 1 0 0 0 0;
#X obj 50 272 else/highshelf~, f 19;
#X obj 411 290 else/highshelf~;
#X connect 0 0 24 0;
#X connect 1 0 2 0;
#X connect 2 0 4 0;
#X connect 4 0 9 0;
#X connect 5 0 2 1;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 8 0 22 0;
#X connect 9 0 25 0;
#X connect 10 0 24 1;
#X connect 12 0 25 0;
#X connect 14 0 15 0;
#X connect 15 0 16 0;
#X connect 16 0 17 0;
#X connect 17 0 25 0;
#X connect 18 0 15 1;
#X connect 19 0 24 3;
#X connect 20 0 24 2;
#X connect 22 0 25 0;
#X connect 23 0 7 1;
#X connect 24 0 11 0;
#X connect 25 0 3 0;
#X restore 447 250 pd multichannel;
#X connect 5 0 10 0;
#X connect 6 0 10 0;
#X connect 7 0 6 0;
#X connect 9 0 10 0;
#X connect 10 0 0 0;
