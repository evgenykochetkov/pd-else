#N canvas 474 34 565 735 10;
#X obj 2 3 cnv 15 301 42 empty empty button 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 2 3 graph;
#X obj 29 40 cnv 4 4 4 empty empty Button 0 28 2 18 #e0e0e0 #000000 0;
#X obj 85 40 cnv 4 4 4 empty empty GUI 0 28 2 18 #e0e0e0 #000000 0;
#X obj 305 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 3 pd;
#X obj 344 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 457 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 477 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 514 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 463 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 501 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 6 261 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 509 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 542 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000 0;
#X obj 5 705 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 95 269 cnv 17 3 231 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 94 517 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 150 395 size <float>;
#X text 192 517 float;
#X text 232 517 - latch status (on: 1 or off: 0);
#X obj 244 227 else/display;
#X msg 244 139 size \$1;
#X floatatom 244 117 5 20 50 0 - - - 0;
#X obj 244 166 else/button 50 50 #FFFFFF #808080 0 1 0 0 0 empty empty;
#X text 232 338 - sets horizontal and vertical size in pixels, f 50;
#X text 162 338 dim <f \, f>;
#X text 138 425 height <float>;
#X text 144 410 width <float>;
#X text 232 410 - sets horizontal size in pixels, f 50;
#X text 232 425 - sets vertical size in pixels, f 50;
#X text 232 395 - sets both horizontal and vertical size in pixels;
#X text 122 594 -dim <float \, float>: x/y dimensions (default 20 \, 20), f 61;
#X text 120 440 bgcolor <f \, f \, f>;
#X text 232 440 - sets background color in RGB, f 50;
#X text 120 455 fgcolor <f \, f \, f>;
#X text 232 455 - sets fore ground color in RGB, f 50;
#X text 92 670 -bgcolor <f \, f \, f>: background color in RGB (default 255 255 255), f 66;
#X text 92 685 -fgcolor <f \, f \, f>: fore ground color in RGB (default 255 255 255), f 66;
#N canvas 634 114 590 622 colors 0;
#X obj 172 90 vsl 15 128 0 255 0 0 empty empty empty 0 -9 0 10 #0800fc #fcfcfc #000000 0 1;
#X obj 151 90 vsl 15 128 0 255 0 0 empty empty empty 0 -9 0 10 #00fc00 #000000 #000000 0 1;
#X obj 131 90 vsl 15 128 0 255 0 0 empty empty empty 0 -9 0 10 #fc0000 #000000 #000000 0 1;
#X obj 248 538 else/display;
#X text 388 157 Example on how to set the color, f 16;
#X obj 248 469 else/button 50 50 #e0e0e0 #808080 1 1 0 1 0 empty empty;
#X obj 333 120 vsl 15 128 0 255 0 0 empty empty empty 0 -9 0 10 #0800fc #fcfcfc #000000 0 1;
#X obj 312 120 vsl 15 128 0 255 0 0 empty empty empty 0 -9 0 10 #00fc00 #000000 #000000 0 1;
#X obj 292 120 vsl 15 128 0 255 0 0 empty empty empty 0 -9 0 10 #fc0000 #000000 #000000 0 1;
#X obj 248 290 else/insert fgcolor;
#X obj 87 269 else/insert bgcolor;
#X obj 292 69 else/initmess set 128;
#X obj 333 91 else/initmess set 160;
#X obj 248 265 else/pack2 128 128 160;
#X obj 87 244 else/pack2 255 255 255;
#X text 309 481 <-- click to change state, f 13;
#X msg 269 368 transparent \$1;
#X obj 131 36 else/initmess 224;
#X obj 269 325 hradio 16 1 0 4 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0;
#X floatatom 269 346 3 0 0 0 - - - 0;
#X text 349 311 Set transparency level: 1 is background \, 2 is also foreground and 3 is full transparency by hiding the outline as well., f 32;
#X msg 291 426 oval \$1;
#X obj 291 397 tgl 20 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X connect 0 0 14 2;
#X connect 1 0 14 1;
#X connect 2 0 14 0;
#X connect 5 0 3 0;
#X connect 6 0 13 2;
#X connect 7 0 13 1;
#X connect 8 0 13 0;
#X connect 9 0 5 0;
#X connect 10 0 5 0;
#X connect 11 0 8 0;
#X connect 11 0 7 0;
#X connect 12 0 6 0;
#X connect 13 0 9 0;
#X connect 14 0 10 0;
#X connect 16 0 5 0;
#X connect 17 0 0 0;
#X connect 17 0 2 0;
#X connect 17 0 1 0;
#X connect 18 0 19 0;
#X connect 19 0 16 0;
#X connect 21 0 5 0;
#X connect 22 0 21 0;
#X restore 470 176 pd colors;
#N canvas 646 88 479 576 modes 0;
#X obj 174 480 else/button 25 25 #FFFFFF #808080 1 1 0 0 0 empty empty;
#X msg 164 256 latch;
#X text 205 254 set to latch mode (default);
#X text 201 280 set to toggle mode;
#X text 218 303 set to bang mode;
#X obj 133 345 bng 20 250 50 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000;
#X msg 207 354 1;
#X msg 215 377 0;
#X obj 174 520 else/display;
#X msg 226 402 set 1;
#X msg 236 423 set 0;
#X msg 184 304 bng;
#X msg 174 281 tgl;
#X msg 79 347 toggle;
#X msg 196 329 click;
#X text 237 327 set to click mode;
#X text 41 201 A bang in the bang mode activates the button and outputs a bang. In toggle and latch mode it queries for the current state., f 63;
#X text 41 16 The 'latch' mode (default) responds to mouse click (where it sends "1") and mouse release (where it sens "0"). The toggle and bang modes behave like the toggle and bang buttons from iemguis. An extra 'click' mode outputs the click information list \, with 4 values (click \, double click \, shift \, alt)., f 63;
#X text 41 75 A float input only works in toggle and latch mode \, in which cases it sets the state (if different than the internal one) and outputs the value ("1" for on state and "0" for off state). A non zero value input sets the state to on and outputs "1" (even it the non zero value is different than 1)., f 63;
#X text 41 137 A set message is like a float message (so it also only works in toggle and latch mode) but only sets the visual state instead (no output)., f 63;
#X text 41 175 The 'toggle' message only works in toggle mode \, where it changes the state and outputs the value., f 63;
#X connect 0 0 8 0;
#X connect 1 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X connect 9 0 0 0;
#X connect 10 0 0 0;
#X connect 11 0 0 0;
#X connect 12 0 0 0;
#X connect 13 0 0 0;
#X connect 14 0 0 0;
#X restore 476 154 pd modes;
#N canvas 822 119 427 443 example 0;
#X obj 126 120 else/button 60 25 #FFFFFF #808080 1 1 0 0 0 empty empty;
#X obj 154 279 s \$0-note;
#X msg 105 242 set Off \, color 50 50 50;
#X floatatom 126 155 3 0 0 0 - - - 0;
#X msg 154 217 set On \, color 220 220 220;
#X text 42 36 Here we have a [button] object in toggle mode that also sets the name and color of a [note] object as an example to design more sophisticated buttons with labels for on/off state., f 52;
#X obj 126 184 select 0 1;
#X text 64 334 Hint: use [button] instread of iemguis toggle for [presets] \, because it can then get and set the value. Check its help file., f 49;
#X obj 245 381 else/presets;
#A saved -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \; -empty- \;;
#X obj 134 124 else/note 44 14 Menlo \$0-note 0 50 50 50 0 255 255 255 0 1 Off;
#X connect 0 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 6 0;
#X connect 4 0 1 0;
#X connect 6 0 2 0;
#X connect 6 1 4 0;
#X restore 464 220 pd example;
#X text 198 268 bang;
#X text 182 172 click -->;
#X text 232 268 -;
#X text 232 294 -;
#X text 192 294 float;
#X text 244 294 when not in bang mode \, set state, f 48;
#X text 244 268 when in bang mode \, activates bang \, change state otherwise, f 48;
#X text 232 309 - sets mode ("latch" \, "toggle" or "bang"), f 50;
#X text 35 164 see also:;
#X obj 44 193 else/pic 0 empty empty empty 0 0;
#X text 90 207 <-- [pic];
#X text 132 310 <latch/tgl/bng>;
#X text 232 324 -;
#X text 186 324 toggle;
#X text 158 639 -size <float>: (same as message method), f 55;
#X text 140 548 -bng/-tgl/-click: set mode (default: latch), f 58;
#X text 136 72 [button] is a GUI button that opearets in four modes: 'latch' \, 'toggle' \, 'bang' and 'click'. See [pd modes] for details., f 55;
#X text 244 324 in toggle mode \, alternates the state and outputs;
#X text 158 654 -transparent <float>: set transparency level, f 55;
#X text 108 470 transparent <float>;
#X text 232 470 - set transparency level, f 50;
#X text 152 609 -send <symbol>: set send name, f 56;
#X text 144 352 send <symbol>;
#X text 232 352 - set send symbol, f 50;
#X text 126 484 readonly <float>;
#X text 232 484 - non zero sets to 'read only', f 50;
#X text 140 579 -readonly: sets to readonly mode, f 58;
#X text 126 366 receive <symbol>;
#X text 232 366 - set receive symbol, f 50;
#X text 134 623 -receive <symbol>: set receive name, f 59;
#N canvas 621 72 484 547 send/receive/hover 0;
#X obj 260 405 tgl 19 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X msg 260 441 readonly \$1;
#X obj 305 345 else/display;
#X msg 67 183 send empty;
#X msg 110 232 receive empty;
#X obj 148 364 else/display -noflash;
#X obj 99 336 else/display -noflash;
#X text 137 184 or just "send";
#X text 201 232 or just "receive";
#X text 33 19 When in edit mode \, [button] shows its inlet/outlet. The inlet will always be hidden if you have a receive symbol \, same with the outlet if you have a send symbol. You can set a send symbol above to send messages to a matching [receive] object. A receive symbol makes [send] objects communicate to it., f 69;
#X text 33 87 If you set send/receive names to "empty" then the symbols are cleared and inlet/outlet are shown again (same if you give an actual empty symbol). Note you need to escape dollar signs with backslashes to set send receive names via messages or flags., f 69;
#X obj 99 269 else/button 100 50 #FFFFFF #808080 0 1 0 0 0 1003-button \$0-button-set;
#X msg 46 163 send \\\$0-button;
#X msg 99 209 receive \\\$0-button-set;
#X obj 148 332 r \$0-button;
#X obj 305 322 r \$0-button-hover;
#X obj 260 468 else/button 100 50 #FFFFFF #808080 0 1 0 0 1 empty empty;
#X text 238 268 A receive name that matches the send name followed by "-hover" outputs hovering status., f 27;
#X text 97 432 The 'readonly' message disables all clicking activities and the object only responds to messages to set it., f 22;
#X obj 326 187 s \$0-button-set;
#X obj 326 153 tgl 21 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X connect 0 0 1 0;
#X connect 1 0 16 0;
#X connect 3 0 11 0;
#X connect 4 0 11 0;
#X connect 11 0 6 0;
#X connect 12 0 11 0;
#X connect 13 0 11 0;
#X connect 14 0 5 0;
#X connect 15 0 2 0;
#X connect 20 0 19 0;
#X restore 398 198 pd send/receive/hover;
#X msg 321 139 dim 100 50;
#X text 150 380 oval <float>;
#X text 232 380 - non zero sets to oval style \, 0 hides it, f 50;
#X text 140 564 -oval: sets to oval style, f 58;
#N canvas 820 108 369 330 style 0;
#X obj 155 210 else/button 100 50 #c8c8c8 #808080 0 1 0 0 0 empty empty;
#X obj 155 283 else/display;
#X obj 155 121 tgl 20 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X msg 155 151 oval \$1;
#X msg 215 161 dim 100 50;
#X msg 94 161 size \$1;
#X floatatom 94 139 5 20 50 0 - - - 0;
#X text 37 26 The oval message sets to oval style mode \, which becomes a circle if you have the same dimensions for width and heigth. The oval mode has no square outline \, but it is still shown when in edit mode. Same with the inlet/outlet by the way \, which is shown in edit mode but not in run mode., f 48;
#X connect 0 0 1 0;
#X connect 2 0 3 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 5 0;
#X restore 476 133 pd style;
#X connect 22 0 24 0;
#X connect 23 0 22 0;
#X connect 24 0 21 0;
#X connect 73 0 24 0;
